else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars=c("Pino","Cepa"))
tgc
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars=(Cepa")
tgc
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars=(Cepa")
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars=("Cepa")
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars=("Cepa")
tgc
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars= c  ("Pino", "Cepa")
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa"))
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa")
tgc
ggplot(tgc, aes(x=cepa, y=TA, fill=cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-se, ymax=len+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
library(ggplot2)
ggplot(tgc, aes(x=cepa, y=TA, fill=cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-se, ymax=len+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(tgc, aes(x=cepa, y=TA, fill=Cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-se, ymax=len+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(tgc, aes(x=Cepa, y=TA, fill=Cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=len-se, ymax=len+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
ggplot(tgc, aes(x=Cepa, y=TA, fill=Cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=TA-se, ymax=TA+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
#Resumen
tgc <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa")
tgc
install.packages(c("ggpubr", "PMCMR"))
library("ggpubr")
library("magrittr")
library("ggplot2")
tabla_E2<-read.csv(file.choose(), header= TRUE)
#Prueba no paramétrica talla área
KWTA<- kruskal.test(TA~Cepa, tabla_E2)
KWTA
tabla_E2<-read.csv(file.choose(), header= TRUE)
tabla_E2
#Prueba no paramétrica talla área
KWTA<- kruskal.test(TA~Cepa, tabla_E2)
KWTA
#Prueba no paramétrica talla área
KWTA<- kruskal.test(PM~Cepa, tabla_E2)
KWTA
#Prueba no paramétrica TR
KWTR<- kruskal.test(TR~Cepa, tabla_E2)
KWTR
#Prueba no paramétrica D
KWD<- kruskal.test(D~Cepa, tabla_E2)
KWD
#Prueba no paramétrica PFA
KWPFA<- kruskal.test(PFA~Cepa, tabla_E2)
KWPFA
#Prueba no paramétrica PFR
KWPFR<- kruskal.test(PFR~Cepa, tabla_E2)
KWPFR
#Prueba no paramétrica PM
KWPM<- kruskal.test(PM~Cepa, tabla_E2)
KWPM
install.packages("car")
#Resumen
rta <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa")
rta
# Prueba de homogeneidad de varianzas de Levene
car::leveneTest(TA~ Cepa, data = tabla_E2)
#Pruebas de normalidad y homogeneidad TA (repetir para todos los parámetros)
#Shapiro-Wilk normality test TA
shapiro.test(tabla_E2$TA)
car::qqPlot(lm(TA~ Cepa, data = tabla_E2), simulate = TRUE,
main = "Q-Q Plot", labels = FALSE)
#Resumen TA
rta <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa")
rta
aov_ta <- aov(TA~ Cepa, data = tabla_E2)
summary(aov_ta)
#Resumen TR
rtr <- summarySE(tabla_E2, measurevar="TR", groupvars= "Cepa")
rtr
#Resumen D
rd<- summarySE(tabla_E2, measurevar="D", groupvars= "Cepa")
rd
#Elegir la tabla
tabla_E2<-read.csv(file.choose(), header= TRUE)
tabla_E2
#Elegir la tabla
tabla_E2<-read.csv(file.choose(), header= TRUE)
#Elegir la tabla
tabla_E2<-read.csv(file.choose(), header= TRUE)
#Elegir la tabla
tabla_E2<-read.csv(file.choose(), header= TRUE)
tabla_E2
#Resumen D
rd<- summarySE(tabla_E2, measurevar="D", groupvars= "Cepa")
rd
#Resumen PFA
rpfa <- summarySE(tabla_E2, measurevar="PFA", groupvars= "Cepa")
rpfa
#Resumen pfr
rpfr <- summarySE(tabla_E2, measurevar="PFR", groupvars= "Cepa")
rpfr
#Resumen
rta <- summarySE(tabla_E2, measurevar="TA", groupvars= "Cepa")
tta
rta
ggplot(tgc, aes(x=Cepa, y=TA, fill=Cepa)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=TA-se, ymax=TA+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
supervivencia <- data.frame(tratamiento=c("E", "Mix", "M", "P", "C"),
supervivencia=c(14.28, 40.81, 91.83, 83.67, 97.95))
head(supervivencia)
supervivencia$tratamiento <- factor(supervivencia$tratamiento, levels = c("E", "Mix", "M", "P", "C"), ordered = TRUE)
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
geom_boxplot(width=0.3)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
library(ggplot2)
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
geom_boxplot(width=0.3)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+  ylim(0, 105)
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 100)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 105)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 105)+ geom_boxplot(width=0.3)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity")+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 105)+ geom_barplot(width=0.3)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity", width = 0.1)+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 105)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
p<-ggplot(data=supervivencia, aes(x=tratamiento, y=supervivencia, fill= tratamiento)) +
geom_bar(stat="identity", width = 0.4)+
labs(x="Tratamiento",y="Porcentaje de supervivencia")+
ylim(0, 105)+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(
axis.title.x = element_text(color = "gray26", size = 12, face = "bold"),
axis.title.y = element_text(color = "gray26", size = 12, face = "bold")
) +
theme(legend.position = "none")+
scale_fill_brewer(palette= "Pastel2")+
theme(axis.text.x = element_text(color= "gray26", face= "bold", size= 12))+
theme(axis.text.y = element_text(color= "gray26", face= "bold", size= 12))
p
## Test if there is one arguments. Quit if there isn't. Save argument is there is only one
if (length(args) != 2) {
cat("\n")
cat("-----------------\n")
cat("| JPEG2ColorPal |\n")
cat("-----------------\n")
cat("author: Jacob L. Steenwyk\n")
cat("citation: NA\n\n\n")
cat("This script takes a JPEG as input. Using a second require argument, this script will.\n")
cat("reduce the image into n number of colors. Thus, any JPEG image can be turned into a\n")
cat("color palette.")
cat("Usage:\n")
cat("Rscript JPEG2ColorPal.R file.jpeg n\n\n")
cat("• file.jpeg is a jpeg file\n")
cat("• n is the number of colors in the resulting color palette.\n")
cat("\n")
quit()
} else if (length(args) == 2) {
jpegFile  = args[1]
numColors = args[2]
}
1+1
citation()
install.packages("phyloseq")
install.packages("vegan")
source('http://bioconductor.org/biocLite.R')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("phyloseq"))
library("phyloseq")
library("vegan")
install.packages("permute")
install.packages("permute")
install.packages("permute")
install.packages("lattice")
install.packages("lattice")
library("vegan")
library("phyloseq")
#Librarias
library("dplyr")
install.packages("mxmaps")
library("mxmaps")
install.packages("mxmaps")
install.packages("mxmaps")
install.packages("mxmaps")
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("diegovalle/mxmaps")
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("diegovalle/mxmaps")
library("mxmaps")
df_mxstate$value <- df_mxstate$pop
mxstate_choropleth(df_mxstate,
title = "Total population, by state")
# To get the column names
colnames(df_mxstate)
df_mxstate$value <- df_mxstate$pop_female
mxstate_choropleth(df_mxstate,
title = "Female population, by state")
library(tidyverse)
install.packages("tidyverse")
fem_pop <- df_mxstate[,c("state_name", "pop_female")] %>%
arrange(desc(df_mxstate$pop_female))
head(fem_pop)
library(tidyverse)
fem_pop <- df_mxstate[,c("state_name", "pop_female")] %>%
arrange(desc(df_mxstate$pop_female))
head(fem_pop)
data("df_mxmunicipio")
df_mxmunicipio$value <-  df_mxmunicipio$indigenous / df_mxmunicipio$pop * 100
mxmunicipio_choropleth(df_mxmunicipio,
num_colors = 1,
title = "Percentage of the population that self-identifies\ as indigenous",
legend = "%")
data("df_mxmunicipio")
df_mxmunicipio$value <-  df_mxmunicipio$indigenous / df_mxmunicipio$pop * 100
mxmunicipio_choropleth(df_mxmunicipio,
num_colors = 2,
title = "Percentage of the population that self-identifies\ as indigenous",
legend = "%")
data("df_mxmunicipio")
df_mxmunicipio$value <-  df_mxmunicipio$indigenous / df_mxmunicipio$pop * 100
mxmunicipio_choropleth(df_mxmunicipio,
num_colors = 5,
title = "Percentage of the population that self-identifies\ as indigenous",
legend = "%")
library(viridis)
library(scales)
library(viridis)
library(scales)
library(leaflet)
library(scales)
library(leaflet)
#Zoom en municipios
mxmunicipio_choropleth(df_mxmunicipio, num_colors = 1,
zoom = subset(df_mxmunicipio, metro_area %in% c("Monclova-Frontera",
"Guaymas",
"Piedras Negras",
"Saltillo",
"Monterrey",
"Chihuahua",
"Juárez",
"Matamoros",
"Tampico",
"Reynosa",
"Mexicali",
"Tijuana"))$region,
title = "Percentage of the population that self-identifies\ as indigenous in the northern states",
legend = "%")
mxmunicipio_choropleth(df_mxmunicipio, num_colors = 1,
zoom = subset(df_mxmunicipio, state_name %in% c("Yucatán", "México"))$region,
title = "Percentage of the population that self-identifies\ as indigenous in Yucatán and Estado de Mexico",
show_states = FALSE,
legend = "%")
data("df_mxstate")
df_mxstate$value = df_mxstate$afromexican / df_mxstate$pop * 100
mxhexbin_choropleth(df_mxstate, num_colors = 1,
title = "Percentage of the population that self-identifies as Afro-Mexican",
legend = "%")
install.packages(c("ggplot2", "pastecs", "psych", "tidyverse", "corrplot", "correlation", "dplyr", "Hmisc","summarytools"), dependencies = TRUE)
mua = function(name){
t = seq(0,60,len=100)
plot(c(-8,8),c(0,20),type='n',axes=FALSE,xlab='',ylab='')
x = -.01*(-t^2+40*t+1200)*sin(pi*t/180)
y = .01*(-t^2+40*t+1200)*cos(pi*t/180)
lines(x,y, lwd=4)
lines(-x,y, lwd=4)
text(0,7,"Vamoa",col='red',cex=2.5)
text(0,5.5, name ,col='red',cex=2.5)
}
mua("coger")
library(ggplot2)
library(tidyverse)
library(viridis)
install.packages("viridisLite")
install.packages("viridisLite")
library(tidyverse)
library("dplyr")
library(tidyverse)
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
View(data)
data <- data %>% gather(key = "observation", value="value", -c(1,2))
View(data)
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value1=sample( seq(10,100), 60, replace=T),
value2=sample( seq(10,100), 60, replace=T),
value3=sample( seq(10,100), 60, replace=T)
)
View(data)
data2 <- data %>% gather(key = "observation", value="value", -c(1,2))
View(data2)
View(data2)
setwd("~/Google Drive/Resultados/Tablas/bin")
data3 <- read.csv("../data/data.csv")
View(data3)
data4 <- data3 %>% gather(key = "sample", value="clasification", -c(1,2))
View(data4)
View(data)
View(data2)
data4 <- data3 %>% gather(key = "sample", value="clasification", -c(1,2))
View(data4)
data4 <- data3 %>% gather(key = "classification", value="reads", -c(1,2))
View(data4)
data <- data3 %>% gather(key = "classification", value="reads", -c(1,2))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(data$classification))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$sample)*nObsType, ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$sample <- rep(levels(data$sample), each=empty_bar*nObsType )
data <- rbind(data, to_add)
